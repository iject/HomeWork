#include <iostream>
#include <cmath>
using namespace std;

void rand_array(int* array, int n)
{
    srand(time(0));
    for (int i = 0; i < n; i++)
    {
        array[i] = rand() % 1000 + 1;
    }
}

void print_array(int* array, int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << array[i] << " ";
    }
    cout << endl;
}

template <typename T>
int num_dig(T a)
{
    int n = 0;
    while (a)
    {
        a /= 10;
        n += 1;
    }
    return n;
}

template <typename T>
int dig_sort(T a, T b)
{
    int n_a = num_dig(a);
    int n_b = num_dig(b);

    if (a == b)
    {
        return 0;
    }

    while (n_a != 0 && n_b != 0)
    {
        n_a -= 1;
        n_b -= 1;

        if ((a / pow(10, n_a)) > (b / pow(10, n_b))) // 123 1234
        {
            return 1;
        } 
        
        if ((a / pow(10, n_a)) < (b / pow(10, n_b))) // 1234 123
        {
            return 0;
        }

    }

    if (n_a > n_b)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

template <typename T>
void bubble_sort(T* a, T n)
{
    bool flag = 1;
    int tmp;
    while (flag)
    {
        flag = 0;
        for (int j = 0; j < n - 1; j++)
        {
            if (dig_sort(a[j], a[j + 1]))
            {
                tmp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = tmp;
                flag = 1;
                /*cout << "bubble test: ";
                print_array(a, n);
                cout << endl;*/
            }
        }
    }
    cout << "bubble sort: ";
}


int main()
{
    int n = 10;
    int* array = new int[n];

    rand_array(array, n);

    print_array(array, n);

    bubble_sort(array, n);

    print_array(array, n);

    delete[] array;
}
